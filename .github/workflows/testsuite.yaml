name: Tests
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    env:
      ENV_NAME: tests
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
    name: Testing
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        # Adding -l {0} helps ensure conda can be found properly.
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9, "3.10"]
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Setup Minimamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          python-version: ${{ env.PYTHON }}
          environment-file: ci/${{ env.ENV_NAME }}.yaml
          activate-environment: ${{ env.ENV_NAME }}

      - name: Conda Info
        run: |
          conda info -a
          conda list
          PYVER=`python -c "import sys; print('{:d}.{:d}'.format(sys.version_info.major, sys.version_info.minor))"`
          if [[ $PYVER != ${{ env.PYTHON }} ]]; then
            exit 1;
          fi

      - name: Install
        run: |
          pip install --no-deps .

      - name: Run Tests
        run: |
          python -m pytest --cov=pyradiosky --cov-config=.coveragerc --cov-report xml:./coverage.xml --junitxml=test-reports/xunit.xml
          # mkdir -p empty
          # cd empty
          # pytest --pyargs pyradiosky --cov=pyradiosky --cov-config=../.coveragerc --cov-report xml:../coverage.xml --junitxml=../test-reports/xunit.xml
          # cd ..

      - uses: codecov/codecov-action@v2.0.2
        if: success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  min_deps:
    env:
      ENV_NAME: min_deps
      PYTHON: 3.8
    name: Min Deps Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        # Adding -l {0} helps ensure conda can be found properly.
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Setup Minimamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          python-version: ${{ env.PYTHON }}
          environment-file: ci/${{ env.ENV_NAME }}.yaml
          activate-environment: ${{ env.ENV_NAME }}

      - name: Conda Info
        run: |
          conda info -a
          conda list
          PYVER=`python -c "import sys; print('{:d}.{:d}'.format(sys.version_info.major, sys.version_info.minor))"`
          if [[ $PYVER != ${{ env.PYTHON }} ]]; then
            exit 1;
          fi

      - name: Install
        run: |
          pip install --no-deps .

      - name: Run Tests
        run: |
          python -m pytest --cov=pyradiosky --cov-config=.coveragerc --cov-report xml:./coverage.xml --junitxml=test-reports/xunit.xml

      - uses: codecov/codecov-action@v2.0.2
        if: success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  min_versions:
    env:
      ENV_NAME: min_versions
      PYTHON: 3.8
    name: Min Versions Testing
    runs-on: macos-latest
      # should go to ubuntu instead when we require at least pyuvdata 2.2.4
      # there are no linux packages on conda forge between 2.1.15 and 2.2.4 for some
      # reason
    # runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        # Adding -l {0} helps ensure conda can be found properly.
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Setup Minimamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          python-version: ${{ env.PYTHON }}
          environment-file: ci/${{ env.ENV_NAME }}.yaml
          activate-environment: ${{ env.ENV_NAME }}

      - name: Conda Info
        run: |
          conda info -a
          conda list
          PYVER=`python -c "import sys; print('{:d}.{:d}'.format(sys.version_info.major, sys.version_info.minor))"`
          if [[ $PYVER != ${{ env.PYTHON }} ]]; then
            exit 1;
          fi

      - name: Install
        run: |
          pip install --no-deps .

      - name: Run Tests
        run: |
          python -m pytest --cov=pyradiosky --cov-config=.coveragerc --cov-report xml:./coverage.xml --junitxml=test-reports/xunit.xml

      - uses: codecov/codecov-action@v2.0.2
        if: success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  warning_test:
    env:
      ENV_NAME: tests
      PYTHON: 3.8
    name: Warning Test
    runs-on: ubuntu-latest
    defaults:
      run:
        # Adding -l {0} helps ensure conda can be found properly.
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Setup Minimamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          python-version: ${{ env.PYTHON }}
          environment-file: ci/${{ env.ENV_NAME }}.yaml
          activate-environment: ${{ env.ENV_NAME }}

      - name: Conda Info
        run: |
          conda info -a
          conda list
          PYVER=`python -c "import sys; print('{:d}.{:d}'.format(sys.version_info.major, sys.version_info.minor))"`
          if [[ $PYVER != ${{ env.PYTHON }} ]]; then
            exit 1;
          fi

      - name: Install
        run: |
          pip install --no-deps .

      - name: Run Tests
        run: |
          mkdir test-reports
          mkdir -p empty
          cd empty
          python -m pytest -W error --pyargs pyradiosky --cov=pyradiosky --cov-config="../.coveragerc" --cov-report xml:".././coverage.xml" --junitxml="../test-reports/xunit.xml"
          cd ..

      - uses: codecov/codecov-action@v2.0.2
        if: success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  docs_test:
      env:
        ENV_NAME: tests
        PYTHON: 3.9
      name: Tutorial Testing
      runs-on: ubuntu-latest
      defaults:
        run:
          # Adding -l {0} helps ensure conda can be found properly.
          shell: bash -l {0}
      strategy:
        fail-fast: false
      steps:
        - uses: actions/checkout@master
          with:
            fetch-depth: 1

        - name: Setup Miniconda
          uses: conda-incubator/setup-miniconda@v2.0.0
          with:
            auto-update-conda: true
            miniconda-version: "latest"
            python-version: ${{ env.PYTHON }}
            environment-file: ci/${{ env.ENV_NAME }}.yaml
            activate-environment: ${{ env.ENV_NAME }}

        - name: Conda Info
          run: |
            conda info -a
            conda list
            PYVER=`python -c "import sys; print('{:d}.{:d}'.format(sys.version_info.major, sys.version_info.minor))"`
            if [[ $PYVER != ${{ env.PYTHON }} ]]; then
              exit 1;
            fi

        - name: Install
          run: |
            pip install --no-deps .

        - name: Run Tests
          run: |
            cd docs
            python -m pytest --doctest-glob="*.rst"
