name: Tests
on: [push, pull_request]

jobs:
  linter:
    name: Linter
    runs-on: ubuntu-latest
    env:
      ENV_NAME: linting
      PYTHON: 3.7
    steps:
      - uses: actions/checkout@master
        with:
         fetch-depth: 1
      - name: Get Miniconda Linux
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda
      - name: Setup Environment
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          ./ci/install_conda.sh
      - name: Linting
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate ${ENV_NAME}
          pre-commit install
          pre-commit run -a
  tests:
    env:
      ENV_NAME: tests
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
    name: Testing
    #    needs: [linter]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7]
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Get Miniconda MacOSX
        if: matrix.os == 'macos-latest'
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda
      - name: Get Miniconda Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda
      - name: Setup Environment
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          ./ci/install_conda.sh
      - name: Install
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate ${ENV_NAME}
          pip install .
      - name: Run Tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate $ENV_NAME
          python -m pytest -v --cov=pyradiosky --cov-config=.coveragerc --cov-report xml:./coverage.xml --junitxml=test-reports/xunit.xml
      - uses: codecov/codecov-action@master
        if: matrix.os == 'ubuntu-latest' && success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  min_deps:
    env:
      ENV_NAME: min_deps
      PYTHON: 3.7
    name: Min Deps Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
         fetch-depth: 1
      - name: Get Miniconda Linux
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda
      - name: Setup Environment
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          ./ci/install_conda.sh
      - name: Install
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate ${ENV_NAME}
          pip install .
      - name: Run Tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate $ENV_NAME
          python -m pytest -v --cov=pyradiosky --cov-config=.coveragerc --cov-report xml:./coverage.xml --junitxml=test-reports/xunit.xml
      - uses: codecov/codecov-action@master
        if: success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  pyuvsim:
    name: pyuvsim
    runs-on: ubuntu-latest
    env:
      ENV_NAME: pyuvsim
      PYTHON: 3.7

    steps:
      - uses: actions/checkout@master
        with:
         fetch-depth: 1
      - name: Get Miniconda Linux
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda
      - name: Setup Environment
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          ./ci/install_conda.sh
      - name: run pyuvsim tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate $ENV_NAME
          pip install --no-deps .
          cd ../
          git clone https://github.com/RadioAstronomySoftwareGroup/pyuvsim.git
          cd pyuvsim
          mkdir test-reports
          python -m pytest pyuvsim --junitxml=test-reports/xunit.xml
